async function checkRouterStatus(routerIp) {
    const url = `http://${routerIp}/`; // Endpoint del router. Può variare in base al modello del router.
    try {
        const response = await fetch(url, {
            method: 'GET',
            mode: 'no-cors' // Questo evita problemi di CORS, se il router non supporta le richieste CORS.
        });
        
        // Se la risposta è ok, il router è acceso e funzionante
        if (response.ok) {
            console.log("Il router è acceso e funzionante.");
            return true;
        } else {
            console.log("Il router non ha risposto come previsto.");
            return false;
        }
    } catch (error) {
        // Se c'è un errore nella richiesta, il router potrebbe essere spento o non funzionante
        console.log("Errore nella connessione al router:", error);
        return false;
    }
}

// Esempio di utilizzo
checkRouterStatus('192.168.1.1').then(status => {
    if (status) {
 console.log("Router è accesso e funziona.");
    } else {
        console.log("Router è spento o non funzionante.");
    }
});


//*CORS (Cross-Origin Resource Sharing):* Se stai facendo richieste da un frontend, potresti incontrare problemi di CORS. La modalità no-cors può aiutare a mitigare questo, ma non ti darà accesso ai dettagli della risposta. In un contesto più avanzato, potresti dover configurare il server del router per consentire le richieste CORS o utilizzare un proxy server.
